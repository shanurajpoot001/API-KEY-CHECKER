export const providers = {
  openai: {
    name: "OpenAI",
    url: "https://api.openai.com/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("sk-"),
  },
  gemini: {
    name: "Google Gemini",
    url: "https://generativelanguage.googleapis.com/v1beta/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("AIza"),
  },
  claude: {
    name: "Anthropic Claude",
    url: "https://api.anthropic.com/v1/models",
    header: (key) => ({ "x-api-key": key }),
    detect: (key) => key.startsWith("sk-ant-"),
  },
  groq: {
    name: "Groq",
    url: "https://api.groq.com/openai/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("gsk_"),
  },
  huggingface: {
    name: "Hugging Face",
    url: "https://api-inference.huggingface.co/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("hf_"),
  },
  mistral: {
    name: "Mistral AI",
    url: "https://api.mistral.ai/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("mistral-"),
  },
  cohere: {
    name: "Cohere",
    url: "https://api.cohere.ai/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("cohere-"),
  },
  replicate: {
    name: "Replicate",
    url: "https://api.replicate.com/v1/models",
    header: (key) => ({ Authorization: `Token ${key}` }),
    detect: (key) => key.length === 40,
  },
  stability: {
    name: "Stability AI",
    url: "https://api.stability.ai/v1/user/account",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("sk-"),
  },
  elevenlabs: {
    name: "ElevenLabs",
    url: "https://api.elevenlabs.io/v1/models",
    header: (key) => ({ "xi-api-key": key }),
    detect: (key) => key.length > 20,
  },
  ai21: {
    name: "AI21 Labs",
    url: "https://api.ai21.com/studio/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("AI21"),
  },
  deepgram: {
    name: "Deepgram",
    url: "https://api.deepgram.com/v1/projects",
    header: (key) => ({ Authorization: `Token ${key}` }),
    detect: (key) => key.startsWith("dg_"),
  },
  assemblyai: {
    name: "AssemblyAI",
    url: "https://api.assemblyai.com/v2/account",
    header: (key) => ({ Authorization: key }),
    detect: (key) => key.startsWith("aa-"),
  },
  runpod: {
    name: "RunPod",
    url: "https://api.runpod.io/v2",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("rp_"),
  },
  fireworks: {
    name: "Fireworks AI",
    url: "https://api.fireworks.ai/inference/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("fk-"),
  },
  togetherai: {
    name: "Together AI",
    url: "https://api.together.xyz/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("together-"),
  },
  tavily: {
    name: "Tavily",
    url: "https://api.tavily.com/v1/search",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("tv-"),
  },
  perplexity: {
    name: "Perplexity AI",
    url: "https://api.perplexity.ai/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("pplx-"),
  },
  llama: {
    name: "Meta LLaMA",
    url: "https://api.meta.com/llama/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.length > 25,
  },

  // ðŸ†• extra examples
  pinecone: {
    name: "Pinecone",
    url: "https://controller.pinecone.io/actions/whoami",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("pc_"),
  },
  weaviate: {
    name: "Weaviate",
    url: "https://somecluster.weaviate.network/v1/schema",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("wv_"),
  },
  qdrant: {
    name: "Qdrant",
    url: "https://qdrant.cloud",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.length > 25,
  },
  supabase: {
    name: "Supabase",
    url: "https://api.supabase.com/v1",
    header: (key) => ({ apikey: key }),
    detect: (key) => key.startsWith("sb_"),
  },
  vercel: {
    name: "Vercel AI SDK",
    url: "https://api.vercel.com/v1/projects",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("vc_"),
  },
  openrouter: {
    name: "OpenRouter",
    url: "https://openrouter.ai/api/v1/models",
    header: (key) => ({ Authorization: `Bearer ${key}` }),
    detect: (key) => key.startsWith("or-"),
  },
  algolia: {
    name: "Algolia",
    url: "https://algolia.com/api/1/indexes",
    header: (key) => ({ "X-Algolia-API-Key": key }),
    detect: (key) => key.length === 32,
  },
  mapbox: {
    name: "Mapbox",
    url: "https://api.mapbox.com",
    header: () => ({}),
    detect: (key) => key.startsWith("pk."),
  },
};
